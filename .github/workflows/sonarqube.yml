name: SonarQube
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path ${{ runner.temp }}\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path ${{ runner.temp }}\scanner
      - name: Build, test (with coverage) and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          # start sonar begin and provide property for OpenCover report (generated below)
          $reportPath = "$PWD\coverage.opencover.xml"
          ${{ runner.temp }}\scanner\dotnet-sonarscanner begin /k:"radaiko_GC" /o:"radaiko" /d:sonar.token="$env:SONAR_TOKEN" /d:sonar.cs.opencover.reportsPaths="$reportPath"

          # build solution
          dotnet build src

          # run tests with Coverlet using the runsettings which requests OpenCover format
          dotnet test src --settings "$PWD/coverage.runsettings" --results-directory "$PWD/test-results"

          # Convert coverage to opencover if needed (reportgenerator can do this), but SonarScanner supports the coverage produced by Coverlet (cobertura)
          # If you prefer OpenCover format, ensure test projects reference coverlet.collector and use --collect as above.
          # Move or copy the coverage file to the expected path if necessary
          # Look for an OpenCover report produced by the runsettings (commonly named opencover.xml or coverage.opencover.xml)
          $opencover = Get-ChildItem -Path "$PWD\test-results" -Recurse -Include "opencover.xml","coverage.opencover.xml" | Select-Object -First 1
          if ($opencover) {
            Copy-Item $opencover.FullName $reportPath -Force
          } else {
            # As a fallback, look for Cobertura and optionally convert later
            $cobertura = Get-ChildItem -Path "$PWD\test-results" -Recurse -Filter "coverage.cobertura.xml" | Select-Object -First 1
            if ($cobertura) {
              Copy-Item $cobertura.FullName $reportPath -Force
              Write-Host "Only Cobertura file found and copied; SonarScanner expects OpenCover. If Sonar fails, enable ReportGenerator conversion or use coverlet.msbuild to produce OpenCover directly."
            } else {
              Write-Host "Coverage file not found at expected location. SonarCloud may not show coverage.";
            }
          }

          ${{ runner.temp }}\scanner\dotnet-sonarscanner end /d:sonar.token="$env:SONAR_TOKEN"
